name: Deploy AWS Environment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        options:
          - 'dev'
          - 'prod'
jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -var="environment=${{ github.event.inputs.environment }}"
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}


      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Apply
        id: apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: terraform apply -auto-approve -var="environment=${{ github.event.inputs.environment }}"
        working-directory: ./terraform
      - name: Upload Terraform State
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: terraform-tfstate
          path: ./terraform/terraform.tfstate
      - name: Download uploaded .tfstate file
        uses: actions/download-artifact@v3
        with:
          name: terraform-tfstate
          path: ./terraform  # Download it to the root directory

      - name: Terraform Destroy on Failure
        if: failure()
        run: terraform destroy -auto-approve -state=./terraform/terraform.tfstate
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}