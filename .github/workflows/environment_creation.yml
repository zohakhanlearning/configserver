name: Deploy AWS Environment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        options:
          - 'dev'
          - 'prod'
jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Remove all backend files (prevent duplicate backend config)
        run: rm -f ./terraform/backend*.tf ./terraform/backend.tf
        working-directory: ./terraform

#      - name: Select backend file
#        run: |
#            cp backend-dev.tf backend.tf
#        working-directory: ./terraform

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0

      - name: Install AWS CLI
        run: sudo apt-get install awscli -y
        working-directory: ./terraform

      # Create S3 bucket and DynamoDB table for state management
      - name: Create S3 bucket and DynamoDB table
        run: |
          aws s3api create-bucket --bucket "zoha-terraform-state-bucket-dev" --region ${{ secrets.AWS_REGION }}
          aws dynamodb create-table --table-name terraform-lock-table \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
            --region ${{ secrets.AWS_REGION }}        

      - name: Wait for S3 Bucket to Propagate
        run: sleep 60  # Wait for 60 seconds

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -var="environment=${{ github.event.inputs.environment }}"
        working-directory: ./terraform


      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -var="environment=${{ github.event.inputs.environment }}"
        working-directory: ./terraform
      - name: Upload Terraform State
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: terraform-tfstate
          path: ./terraform/terraform.tfstate
      - name: Download uploaded .tfstate file
        uses: actions/download-artifact@v3
        with:
          name: terraform-tfstate
          path: ./terraform  # Download it to the root directory

      - name: Terraform Destroy on Failure
        if: failure()
        run: terraform destroy -auto-approve -state=./terraform/terraform.tfstate
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}